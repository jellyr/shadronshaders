
const vec2 PIXEL_SIZE = vec2(512,512);

const vec2 CHARACTER_SIZE = vec2(16,16);

const vec2 CHAR_0 = vec2(4,5);
const vec2 CHAR_1 = vec2(5,5);
const vec2 CHAR_2 = vec2(6,5);
const vec2 CHAR_3 = vec2(0,4);
const vec2 CHAR_4 = vec2(1,4);
const vec2 CHAR_5 = vec2(2,4);
const vec2 CHAR_6 = vec2(3,4);
const vec2 CHAR_7 = vec2(4,4);
const vec2 CHAR_8 = vec2(5,4);
const vec2 CHAR_9 = vec2(6,4);

glsl {	
	vec2[] DIGIT_LOOKUP = vec2[](
		CHAR_0,CHAR_1,CHAR_2,CHAR_3,CHAR_4,
		CHAR_5,CHAR_6,CHAR_7,CHAR_8,CHAR_9
	);
	
	int[] DIGIT_DIVIDER = int[](
		1000000000,
		100000000,
		10000000,
		1000000,
		100000,
		10000,
		1000,
		100,
		10,
		1
	);
}


image Font = file("mario64font.png");

glsl vec4 renderCharacter(vec4 bg, vec2 pos_px, vec2 location, vec2 character) {
	vec2 tex = (pos_px-location) / CHARACTER_SIZE;
	if (all(greaterThanEqual(tex,vec2(0,0)) && lessThanEqual(tex,vec2(1,1)))) {
		return texture(Font, ((character+tex) * CHARACTER_SIZE) / sizeof(Font));
	}
	return bg;
}

template<DIGITS>
glsl vec4 renderInt(vec4 bg, vec2 pos_px, vec2 location, int num) {
	float offset = 0;
	bool trim = true;
	int digitIndex = int((pos_px.x - location.x) / CHARACTER_SIZE.x);
	if (digitIndex < 0 || digitIndex >= DIGITS) {
		return bg;
	}
	vec2 digitLocation = location + vec2(digitIndex,0)*CHARACTER_SIZE;
	int digit = (num / DIGIT_DIVIDER[digitIndex+(10-DIGITS)]) % 10;
	return renderCharacter(bg, pos_px, digitLocation, DIGIT_LOOKUP[digit]);
}

glsl vec4 RenderTextPass(vec2 pos, float time) {
	vec2 pos_px = pos * shadron_Dimensions;
	
	vec4 col = vec4(1,1,1,1);
	
	col = renderInt<6>(col,pos_px,vec2(100,200),int(time/100*1000));
	
	return col;
}
animation RenderText = glsl(RenderTextPass, PIXEL_SIZE);