#include <affine_transform>

#define SPHEREMAP_VERTEX_COUNT(S) (6*6*(S)*(S))

const vec3 X = vec3(1,0,0);
const vec3 Y = vec3(0,1,0);
const vec3 Z = vec3(0,0,1);

glsl struct Vertex {
    vec3 pos;
    vec3 normal;
};

glsl mat3 lookMatrix(vec3 direction) {
    vec3 rr = vec3(0,1,0);
	vec3 ww = normalize(direction);
	vec3 uu = normalize(cross(ww,rr));
	vec3 vv = normalize(cross(uu,ww));
    return mat3(uu,vv,ww);
}

//Stolen from https://github.com/stackgl/glsl-look-at/blob/gh-pages/index.glsl
glsl vec3 cameraLookView(vec3 vertex, vec3 position, vec3 lookAt) {
	mat3 transform = inverse(lookMatrix(lookAt-position));
    return transform*(vertex-position);
}
glsl vec3 cameraSphereView(vec3 vertex, vec3 lookAt, float distance, float theta, float phi) {
	vec3 position = lookAt + distance * rotateY(rotateZ(vec3(1,0,0),phi),theta);
	return cameraLookView(vertex, position, lookAt);
}

glsl Vertex transform(Vertex vertex, vec3 translate, vec3 rotate, vec3 scale) {
	Vertex result;
    result.pos = -translate + scale * rotateZ(rotateY(rotateX(vertex.pos,-rotate.x),-rotate.y),-rotate.z);
    result.normal = rotateZ(rotateY(rotateX(vertex.normal,-rotate.x),-rotate.y),-rotate.z);
    return result;
}

glsl vec3 transformPos(vec3 pos, vec3 translate, vec3 rotate, vec3 scale) {
	return -translate + scale * rotateZ(rotateY(rotateX(pos,-rotate.x),-rotate.y),-rotate.z);
}

glsl {
    mat3[] SPHEREMAP_FACES = mat3[](
        mat3(Z,Y,X),
        mat3(Z,-X,Y),
        mat3(-X,Y,Z),
        mat3(-Z,Y,-X),
        mat3(Z,X,-Y),
        mat3(X,Y,-Z)
    );
}

template <SIDE>
glsl vec3 spheremapDir(int i) {
    ivec3 gridCoord = spheremapGridCoord<SIDE>(i);
    int face = gridCoord.z;
    vec3 coord = vec3(2*(vec2(gridCoord.xy)/vec2(SIDE,SIDE)-vec2(0.5,0.5)),1);
    return normalize(SPHEREMAP_FACES[face] * coord);
}

template <SIDE>
glsl ivec3 spheremapGridCoord(int si) {
    int face = si / (6*(SIDE)*(SIDE));
    int i = si % (6*(SIDE)*(SIDE));
    int v[6] = int[6](0, 1, (SIDE)+1, (SIDE)+2, (SIDE)+1, 1);
    int row = i/(6*(SIDE));
    int base = i/6+row;
    int j = base+v[i%6];
    return ivec3(j%((SIDE)+1), j/((SIDE)+1), face);
}

template <HEIGHT_FUNC, SIDE>
glsl vec3 spheremapVertex(int i) {
    vec3 dir = spheremapDir<SIDE>(i);
    return HEIGHT_FUNC(dir) * dir;
}