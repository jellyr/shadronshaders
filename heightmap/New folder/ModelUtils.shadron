
glsl struct Vertex {
    vec3 pos;
    vec3 normal;
};

//Stolen from https://github.com/stackgl/glsl-look-at/blob/gh-pages/index.glsl
glsl vec3 cameraLookView(vec3 vertex, vec3 position, vec3 lookAt) {
	vec3 rr = vec3(0,1,0);
	vec3 ww = normalize(lookAt-position);
	vec3 uu = normalize(cross(ww,rr));
	vec3 vv = normalize(cross(uu,ww));
	mat3 transform = inverse(mat3(uu,vv,ww));
    return transform*(vertex-position);
}
glsl vec3 cameraSphereView(vec3 vertex, vec3 lookAt, float distance, float theta, float phi) {
	vec3 position = lookAt + distance * rotateY(rotateZ(vec3(1,0,0),phi),theta);
	return cameraLookView(vertex, position, lookAt);
}

glsl Vertex transform(Vertex vertex, vec3 translate, vec3 rotate, vec3 scale) {
	Vertex result;
    result.pos = -translate + scale * rotateZ(rotateY(rotateX(vertex.pos,-rotate.x),-rotate.y),-rotate.z);
    result.normal = rotateZ(rotateY(rotateX(vertex.normal,-rotate.x),-rotate.y),-rotate.z);
    return result;
}